{
    "noir_version": "1.0.0-beta.9+6abff2f16e1c1314ba30708d1cf032a536de3d19",
    "hash": "635316355797751349",
    "abi": {
        "parameters": [
            {
                "name": "private_voter_id",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "private_vote_choice",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "poll_unit",
                "type": {
                    "kind": "field"
                },
                "visibility": "public"
            },
            {
                "name": "previous_records",
                "type": {
                    "kind": "struct",
                    "path": "VoteRecords",
                    "fields": [
                        {
                            "name": "voter_ids",
                            "type": {
                                "kind": "array",
                                "length": 100,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "poll_units",
                            "type": {
                                "kind": "array",
                                "length": 100,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "count",
                            "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        }
                    ]
                },
                "visibility": "private"
            }
        ],
        "return_type": {
            "abi_type": {
                "kind": "struct",
                "path": "VoteRecords",
                "fields": [
                    {
                        "name": "voter_ids",
                        "type": {
                            "kind": "array",
                            "length": 100,
                            "type": {
                                "kind": "field"
                            }
                        }
                    },
                    {
                        "name": "poll_units",
                        "type": {
                            "kind": "array",
                            "length": 100,
                            "type": {
                                "kind": "field"
                            }
                        }
                    },
                    {
                        "name": "count",
                        "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                        }
                    }
                ]
            },
            "visibility": "public"
        },
        "error_types": {
            "4674613560121720917": {
                "error_kind": "string",
                "string": "Maximum voter limit reached"
            },
            "5019202896831570965": {
                "error_kind": "string",
                "string": "attempt to add with overflow"
            },
            "13579937923706979613": {
                "error_kind": "string",
                "string": "This voter has voted already"
            },
            "17262207620413297063": {
                "error_kind": "string",
                "string": "Invalid vote choice"
            }
        }
    },
    "bytecode": "",
    "debug_symbols": "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",
    "file_map": {
        "50": {
            "source": "global MAX_VOTERS: u32 = 100;\nglobal VOTE_YES: Field =  1;\nglobal VOTE_NO: Field = 2;\n\nfn main(\n    private_voter_id: Field, \n    private_vote_choice: Field, \n    poll_unit: pub Field,\n    mut previous_records: VoteRecords,\n)-> pub VoteRecords{\n    let voter = Voter::new(private_voter_id, private_vote_choice, poll_unit);\n    process_vote(voter.voter_id, voter.vote_choice, voter.poll_unit, previous_records)\n}\n\nfn validate_vote_choice(vote_choice: Field) -> bool {\n    if vote_choice == VOTE_NO {\n        true\n    } else if vote_choice == VOTE_YES {\n        true\n    } else {\n        false\n    }\n}\n\nfn add_vote (voter:Voter, mut vote_records: VoteRecords)-> VoteRecords{\n    // Check if we've reached maximum voters\n    assert(vote_records.count < MAX_VOTERS, \"Maximum voter limit reached\");\n    \n    let mut has_voted = false;\n    for i in 0..MAX_VOTERS{\n        if vote_records.voter_ids[i] == voter.voter_id{\n            has_voted = true;\n        }\n    }\n    assert(!has_voted, \"This voter has voted already\");\n    vote_records.voter_ids[vote_records.count] = voter.voter_id;\n    vote_records.poll_units[vote_records.count] = voter.poll_unit;\n    vote_records.count += 1;\n    vote_records\n}\n\n// Voter id and vote choice can be the 2 different things, poll units can be the same\nstruct Voter {\n    voter_id: Field,\n    vote_choice: Field,\n    pub poll_unit: Field,\n}\n\nimpl Voter {\n    fn new(voter_id: Field, vote_choice: Field, poll_unit: Field,) -> Voter {\n        assert(validate_vote_choice(vote_choice), \"Invalid vote choice\");\n        Voter{\n            voter_id: voter_id,\n            vote_choice: vote_choice,\n            poll_unit: poll_unit\n        }\n    }\n}\n\nstruct VoteRecords {\n    voter_ids: [Field;MAX_VOTERS],\n    poll_units: [Field;MAX_VOTERS],\n    count: u32\n}\n\nimpl VoteRecords{\n    fn new()-> VoteRecords{\n        VoteRecords{\n            voter_ids: [0;MAX_VOTERS],\n            poll_units: [0;MAX_VOTERS],\n            count: 0\n        }\n    }\n}\n\nfn process_vote(voter_id: Field, vote_choice: Field, poll_unit: Field, mut vote_records: VoteRecords) -> VoteRecords{\n    let voter = Voter::new(voter_id, vote_choice, poll_unit);\n    add_vote(voter, vote_records)\n}\n\n#[test]\nfn test_double_voting() {\n    // THIS TEST IS SUPPOSED TO FAIL\n    let mut records = VoteRecords::new();\n    records = main(1, VOTE_NO, 12, records);\n    records = main(1, VOTE_NO, 12, records);\n}\n\n#[test]\nfn test_different_voters_voting() {\n    let mut records = VoteRecords::new();\n    records = main(1, VOTE_NO, 12, records);\n    records = main(2, VOTE_NO, 12, records);\n}\n\n#[test]\nfn test_max_voters_limit() {\n    let mut records = VoteRecords::new();\n    // Test adding exactly MAX_VOTERS votes (should succeed)\n    for i in 1..=MAX_VOTERS as u32{\n        records = main(i as Field, VOTE_YES, 12, records);\n    };\n    \n    // Try to add one more vote (should fail with maximum voter limit reached)\n    // This test will fail if the MAX_VOTERS check doesn't work\n    // UNCOMMENT TO FAIL\n    // records = process_vote((MAX_VOTERS + 1) as Field, VOTE_NO, 12, records);\n}\n\n",
            "path": "/home/konquest/code_repo/noir_lang/private_voting/src/main.nr"
        }
    },
    "names": [
        "main"
    ],
    "brillig_names": [
        "directive_invert",
        "directive_integer_quotient"
    ]
}